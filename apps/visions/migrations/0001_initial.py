# Generated by Django 2.1.7 on 2019-07-03 02:30

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('assets', '0027_auto_20190521_1703'),
    ]

    operations = [
        migrations.CreateModel(
            name='Classify',
            fields=[
                ('org_id', models.CharField(blank=True, db_index=True, default='', max_length=36, verbose_name='Organization')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128, verbose_name='Name')),
                ('model', models.CharField(blank=True, max_length=54, null=True, verbose_name='Model')),
                ('height', models.CharField(blank=True, max_length=54, null=True, verbose_name='Height')),
                ('weight', models.CharField(blank=True, max_length=54, null=True, verbose_name='Weight')),
                ('rated_power', models.CharField(blank=True, max_length=54, null=True, verbose_name='Rated power')),
                ('device_type', models.CharField(blank=True, choices=[('switch', 'Switch'), ('x86', 'X86'), ('vm', 'VM'), ('storage', 'Storage'), ('small_machine', 'Small Machine'), ('firewall', 'Firewall'), ('load_balancer', 'Load Balancer'), ('optical_switch', 'Optical Switch'), ('power_linux', 'Power Linux'), ('appliance', 'Appliance'), ('chassis', 'Chassis'), ('patch_panel', 'Patch Panel'), ('physical_vision', 'Physical Visions'), ('other', 'Other')], default='x86', max_length=20, null=True, verbose_name='Device Type')),
                ('snmp_version', models.CharField(blank=True, choices=[('1', '1'), ('2c', '2c'), ('3', '3')], default='2c', max_length=20, null=True, verbose_name='SNMP Version')),
                ('front_pic_file', models.CharField(blank=True, max_length=128, null=True, verbose_name='Front picture file')),
                ('rear_pic_file', models.CharField(blank=True, max_length=128, null=True, verbose_name='Rear picture file')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('created_by', models.CharField(blank=True, max_length=128, verbose_name='Created by')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('comment', models.TextField(blank=True, verbose_name='Comment')),
                ('assets', models.ManyToManyField(blank=True, related_name='granted_by_visions_classify', to='assets.Asset', verbose_name='Asset')),
            ],
            options={
                'verbose_name': 'Classify',
            },
        ),
        migrations.CreateModel(
            name='Effect',
            fields=[
                ('org_id', models.CharField(blank=True, db_index=True, default='', max_length=36, verbose_name='Organization')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128, verbose_name='Name')),
                ('explain', models.CharField(blank=True, max_length=128, null=True, verbose_name='Explain')),
                ('x1', models.IntegerField(blank=True, null=True, verbose_name='X')),
                ('y1', models.IntegerField(blank=True, null=True, verbose_name='Y')),
                ('x2', models.IntegerField(blank=True, null=True, verbose_name='X')),
                ('y2', models.IntegerField(blank=True, null=True, verbose_name='Y')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('created_by', models.CharField(blank=True, max_length=128, verbose_name='Created by')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('comment', models.TextField(blank=True, verbose_name='Comment')),
            ],
            options={
                'verbose_name': 'Effect',
            },
        ),
        migrations.CreateModel(
            name='Gallery',
            fields=[
                ('org_id', models.CharField(blank=True, db_index=True, default='', max_length=36, verbose_name='Organization')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128, verbose_name='Name')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('created_by', models.CharField(blank=True, max_length=128, verbose_name='Created by')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('comment', models.TextField(blank=True, verbose_name='Comment')),
                ('effects', models.ManyToManyField(blank=True, related_name='granted_by_visions_gallery', to='visions.Effect', verbose_name='Effect')),
            ],
            options={
                'verbose_name': 'Gallery',
            },
        ),
        migrations.CreateModel(
            name='Material',
            fields=[
                ('org_id', models.CharField(blank=True, db_index=True, default='', max_length=36, verbose_name='Organization')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128, verbose_name='Name')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('created_by', models.CharField(blank=True, max_length=128, verbose_name='Created by')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('comment', models.TextField(blank=True, verbose_name='Comment')),
                ('classifys', models.ManyToManyField(blank=True, related_name='granted_by_visions_material', to='visions.Classify', verbose_name='Nodes')),
            ],
            options={
                'verbose_name': 'Material',
            },
        ),
        migrations.CreateModel(
            name='Music',
            fields=[
                ('org_id', models.CharField(blank=True, db_index=True, default='', max_length=36, verbose_name='Organization')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128, verbose_name='Name')),
                ('address', models.CharField(blank=True, max_length=128, null=True, verbose_name='Address')),
                ('max_power', models.CharField(blank=True, max_length=54, null=True, verbose_name='Max power')),
                ('manager', models.CharField(blank=True, max_length=54, null=True, verbose_name='Manager')),
                ('space', models.CharField(blank=True, max_length=54, null=True, verbose_name='Space')),
                ('longitude', models.FloatField(blank=True, null=True, verbose_name='Longitude')),
                ('latitude', models.FloatField(blank=True, null=True, verbose_name='Latitude')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('created_by', models.CharField(blank=True, max_length=128, verbose_name='Created by')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('comment', models.TextField(blank=True, verbose_name='Comment')),
                ('gallerys', models.ManyToManyField(blank=True, related_name='granted_by_visions_music', to='visions.Gallery', verbose_name='Gallery')),
            ],
            options={
                'verbose_name': 'Music',
            },
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('org_id', models.CharField(blank=True, db_index=True, default='', max_length=36, verbose_name='Organization')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128, verbose_name='Name')),
                ('purpose', models.CharField(blank=True, max_length=100, null=True, verbose_name='Purpose')),
                ('position', models.IntegerField(blank=True, null=True, verbose_name='Position')),
                ('u_quantity', models.IntegerField(blank=True, null=True, verbose_name='U quantity')),
                ('u_location', models.CharField(blank=True, choices=[('top', 'TOP'), ('bottom', 'Bottom')], default='bottom', max_length=10, null=True, verbose_name='U location')),
                ('model', models.CharField(blank=True, max_length=54, null=True, verbose_name='Model')),
                ('max_power', models.CharField(blank=True, max_length=54, null=True, verbose_name='Max power')),
                ('max_bearing', models.CharField(blank=True, max_length=54, null=True, verbose_name='Max bearing')),
                ('start_time', models.DateTimeField(blank=True, null=True, verbose_name='Start time')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('created_by', models.CharField(blank=True, max_length=128, verbose_name='Created by')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('comment', models.TextField(blank=True, verbose_name='Comment')),
                ('assets', models.ManyToManyField(blank=True, related_name='granted_by_visions_video', to='assets.Asset', verbose_name='Asset')),
                ('effect', models.ForeignKey(blank=True, max_length=64, null=True, on_delete=django.db.models.deletion.SET_NULL, to='visions.Effect', verbose_name='Effect')),
                ('gallery', models.ForeignKey(blank=True, max_length=64, null=True, on_delete=django.db.models.deletion.SET_NULL, to='visions.Gallery', verbose_name='Gallery')),
                ('music', models.ForeignKey(blank=True, max_length=64, null=True, on_delete=django.db.models.deletion.SET_NULL, to='visions.Music', verbose_name='Music')),
                ('nodes', models.ManyToManyField(blank=True, related_name='granted_by_visions_video', to='assets.Node', verbose_name='Nodes')),
            ],
            options={
                'verbose_name': 'Video',
            },
        ),
        migrations.CreateModel(
            name='VideoCombine',
            fields=[
                ('org_id', models.CharField(blank=True, db_index=True, default='', max_length=36, verbose_name='Organization')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128, verbose_name='Name')),
                ('video_quantity', models.IntegerField(blank=True, default=17, null=True, verbose_name='Video quantity')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('created_by', models.CharField(blank=True, max_length=128, verbose_name='Created by')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('comment', models.TextField(blank=True, verbose_name='Comment')),
                ('effect', models.ForeignKey(blank=True, max_length=64, null=True, on_delete=django.db.models.deletion.SET_NULL, to='visions.Effect', verbose_name='Effect')),
                ('gallery', models.ForeignKey(blank=True, max_length=64, null=True, on_delete=django.db.models.deletion.SET_NULL, to='visions.Gallery', verbose_name='Gallery')),
                ('music', models.ForeignKey(blank=True, max_length=64, null=True, on_delete=django.db.models.deletion.SET_NULL, to='visions.Music', verbose_name='Music')),
                ('videos', models.ManyToManyField(blank=True, related_name='granted_by_visions_video_combine', to='visions.Video', verbose_name='Video')),
            ],
            options={
                'verbose_name': 'Video combine',
            },
        ),
        migrations.AddField(
            model_name='video',
            name='video_combine',
            field=models.ForeignKey(blank=True, max_length=64, null=True, on_delete=django.db.models.deletion.SET_NULL, to='visions.VideoCombine', verbose_name='Video combine'),
        ),
        migrations.AddField(
            model_name='gallery',
            name='music',
            field=models.ForeignKey(blank=True, max_length=64, null=True, on_delete=django.db.models.deletion.SET_NULL, to='visions.Music', verbose_name='Music'),
        ),
        migrations.AddField(
            model_name='effect',
            name='gallery',
            field=models.ForeignKey(blank=True, max_length=64, null=True, on_delete=django.db.models.deletion.SET_NULL, to='visions.Gallery', verbose_name='Gallery'),
        ),
        migrations.AddField(
            model_name='effect',
            name='music',
            field=models.ForeignKey(blank=True, max_length=64, null=True, on_delete=django.db.models.deletion.SET_NULL, to='visions.Music', verbose_name='Music'),
        ),
        migrations.AddField(
            model_name='effect',
            name='video_combines',
            field=models.ManyToManyField(blank=True, related_name='granted_by_visions_effect', to='visions.VideoCombine', verbose_name='Video combine'),
        ),
        migrations.AddField(
            model_name='effect',
            name='videos',
            field=models.ManyToManyField(blank=True, related_name='granted_by_visions_effect', to='visions.Video', verbose_name='Video'),
        ),
        migrations.AddField(
            model_name='classify',
            name='material',
            field=models.ForeignKey(blank=True, max_length=64, null=True, on_delete=django.db.models.deletion.SET_NULL, to='visions.Material', verbose_name='Material'),
        ),
        migrations.AddField(
            model_name='classify',
            name='nodes',
            field=models.ManyToManyField(blank=True, related_name='granted_by_visions_classify', to='assets.Node', verbose_name='Nodes'),
        ),
        migrations.AlterUniqueTogether(
            name='videocombine',
            unique_together={('org_id', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='video',
            unique_together={('org_id', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='music',
            unique_together={('org_id', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='material',
            unique_together={('org_id', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='gallery',
            unique_together={('org_id', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='effect',
            unique_together={('org_id', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='classify',
            unique_together={('org_id', 'name')},
        ),
    ]
